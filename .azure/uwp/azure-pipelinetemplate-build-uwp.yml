# GrampsView build UWP

parameters:
  - name: yesNo # name of the parameter; required
    type: boolean # data type of the parameter; required
    default: false

steps: 
- task: NuGetCommand@2 
  displayName: 'NuGet restore solution'
  inputs:
    restoreSolution: '$(solution)'

- task: DownloadSecureFile@1
  displayName: 'Download Secret.cs file'
  inputs:
    secureFile: 'Secret.cs'

- task: CopyFiles@2
  displayName: 'Copy Files to: GrampsView/Common/'
  inputs:
    SourceFolder: '$(Agent.TempDirectory)'
    Contents: Secret.cs
    TargetFolder: GrampsView/Common/

- task: DownloadSecureFile@1
  name: mySecureFile
  displayName: 'Download GrampsViewUWP.pfx file'
  inputs:
    secureFile: '$(signingCert.SecureFile)'
 
- task: CopyFiles@2
  displayName: 'Copy PFX File to: GrampsView'
  inputs:
    SourceFolder: '$(Agent.TempDirectory)'
    Contents: '$(signingCert.SecureFile)'
    TargetFolder: '$(signingCert.targetFolder)'

- powershell: |
   Write-Host "Start adding the PFX file to the certificate store."
   
   $pfxpath = '$(signingCert.targetFolder)$(signingCert.SecureFile)'
   Write-Host   $pfxpath
   $password = '$(signingCert.password)'
         
   Add-Type -AssemblyName System.Security
   $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
   $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
   $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
   $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
   $store.Add($cert)
   $store.Close()
  
- task: XplatGenerateReleaseNotes@3
  inputs:
    outputfile: '$(Build.ArtifactStagingDirectory)\CHANGELOG.md'
    templateLocation: 'File'
    templatefile: 'GrampsView/AnythingElse/DeploymentTools/ReleaseNotesTemplate.txt'
    dumpPayloadToConsole: true
    dumpPayloadToFile: false
    replaceFile: True
    getParentsAndChildren: False

- task: ExtractVersionFromTag@1
  inputs:
    projectFolderPath: '$(Build.SourcesDirectory)'

- task: richardfennellBM.BM-VSTS-Versioning-Task.Version-APPX-Task.VersionAPPX@2
  displayName: 'Version APPX'
  inputs:
    VersionNumber: '$(MAJOR).$(MINOR).$(PATCH).0'
    InjectVersion: true

- task: VSBuild@1
  displayName: 'Build UWP project'
  inputs:
    solution: '$(projects)'
    msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)"
                  /p:AppxPackageDir="$(appxPackageDir)"
                  /p:AppxBundle=Always
                  /p:UapAppxPackageBuildMode=StoreUpload
                  /p:AppxPackageSigningEnabled=true
                  /p:PackageCertificateThumbprint="$(signingCert.thumbprint)" 
                  /p:PackageCertificateKeyFile="$(signingCert.targetFolder)$(signingCert.SecureFile)"  
                  /p:PackageCertificatePassword="$(signingCert.password)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
   
- task: CopyFiles@2 
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\AppxPackages\**'
    TargetFolder: '$(build.artifactstagingdirectory)'
