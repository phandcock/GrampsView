name: GrampsView NUnit test
  
variables:
  - name: buildPlatform
    value: 'x64'
  - name: buildConfiguration
    value: 'Release'

  - name: solution
    value: '**/*.sln'
  - name: projects
    value: '$(Build.SourcesDirectory)/GrampsView.Test.NUnit/*.csproj'

trigger:
    tags:
        include:
        - v*
pr: none

pool:
  name: Azure Pipelines
  vmImage: 'windows-latest'
  demands:
  - MSBuild
  - Xamarin.Android
  - JDK

steps:
- template: azure-pipelinetemplate-build-nunit.yml

- task: VSTest@2
  inputs:
    #batchingBasedOnAgentsOption: 'autoBatchSize' # Optional. Options: autoBatchSize, customBatchSize
    #batchingBasedOnExecutionTimeOption: 'autoBatchSize' # Optional. Options: autoBatchSize, customTimeBatchSize
    codeCoverageEnabled: true # Optional
    #collectDumpOn: 'onAbortOnly' # Optional. Options: onAbortOnly, always, never
    configuration: '$(BuildConfiguration)'
    #customBatchSizeValue: '10' # Required when distributionBatchType == BasedOnTestCases && BatchingBasedOnAgentsOption == CustomBatchSize
    #customRunTimePerBatchValue: '60' # Required when distributionBatchType == BasedOnExecutionTime && BatchingBasedOnExecutionTimeOption == CustomTimeBatchSize
    diagnosticsEnabled: true # Optional
    #distributionBatchType: 'basedOnTestCases' # Optional. Options: basedOnTestCases, basedOnExecutionTime, basedOnAssembly
    # dontDistribute: true # Optional
    failOnMinTestsNotRun: true # Optional
    #minimumExpectedTests: '1' # Optional
    #otherConsoleOptions: # Optional
    #overrideTestrunParameters: # Optional
    #pathtoCustomTestAdapters: # Optional
    #platform: '$(buildPlatform)'
    #publishRunAttachments: true # Optional
    #rerunFailedTestCasesMaxLimit: '5' # Optional
    #rerunFailedTests: False # Optional
    #rerunFailedThreshold: '30' # Optional
    #rerunMaxAttempts: '3' # Optional
    #rerunType: 'basedOnTestFailurePercentage' # Optional. Options: basedOnTestFailurePercentage, basedOnTestFailureCount
    #runAllTestsAfterXBuilds: '50' # Optional
    #runInParallel: False # Optional
    #runOnlyImpactedTests: False # Optional
    #runSettingsFile: # Optional
    #runTestsInIsolation: False # Optional
    searchFolder: '$(build.artifactstagingdirectory)' 
    #tcmTestRun: '$(test.RunId)' # Optional
    testAssemblyVer2: |
        **\*test.dll
        !**\*TestAdapter.dll
        !**\obj\**
        !**\*test*.dll

    #testConfiguration: # Required when testSelector == TestPlan
    #testFiltercriteria: # Optional
    #testPlan: # Required when testSelector == TestPlan
    #testRunTitle: # Optional
    testSelector: 'testAssemblies'
    #testSuite: # Required when testSelector == TestPlan
    #uiTests: false # Optional
    #vstestLocation: # Optional
    #vstestLocationMethod: 'version' # Optional. Options: version, location
    #vsTestVersion: 'latest' # Optional. Options: latest, 16.0, 15.0, 14.0, toolsInstaller

# Command line
# Run a command line script using Bash on Linux and macOS and cmd.exe on Windows
- task: CmdLine@2
  inputs:
    script: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Team Tools\Dynamic Code Coverage Tools\CodeCoverage.exe"' 
    #workingDirectory: # Optional
    #failOnStderr: false # Optional
    failOnStandardError: false

# This is the extension that generate the coverage test and converts it into .coveragexml.
# It will get all the Test Projects that is located in searchFolderForTestFiles using the filter in listTestFiles.
# After we get all the Test Projects dlls, We will run the VSTest for all the Test Project with /EnabledCodeCoverage,
# which will generate the DynamicCodeCoverage.coveragexml.
#- task: CoverageConverter@0
#  inputs:
#    searchFolderForTestFiles: '$(System.DefaultWorkingDirectory)'
#    vsTestExeFileLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe'
#    vsTestArgs: '/EnableCodeCoverage'
#    listTestFiles: '**\bin\**\*.Tests*.dll'
#    temporaryFolderForCodeCoverage: 'Agent.TempDirectory'
#    temporaryFileCoveragexml: '\TestResults\DynamicCodeCoverage.coveragexml'
#    codeCoverageExeFileLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Team Tools\Dynamic Code Coverage Tools\CodeCoverage.exe'
#    failOnStandardError: false

# Here is the Report Generator that will get the DynamicCodeCoverage.coveraxml created above and convert into a Report.
#- task: reportgenerator@4
#  displayName: 'Generate Coverage Report'
#  inputs:
#    reports: '$(Agent.TempDirectory)\TestResults\DynamicCodeCoverage.coveragexml'
#    targetdir: '$(System.DefaultWorkingDirectory)\TestResults\Coverage\Reports'
#    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
#    failOnStandardError: false

# This app will publish the report into Azure Code Coverage Tab.
#- task: PublishCodeCoverageResults@1
#  displayName: 'Publish Coverage Report'
#  inputs:
#    codeCoverageTool: 'Cobertura'
#    summaryFileLocation: '$(System.DefaultWorkingDirectory)\TestResults\Coverage\Reports\Cobertura.xml'
#    reportDirectory: '$(System.DefaultWorkingDirectory)\TestResults\Coverage\Reports'
#    failOnStandardError: false
