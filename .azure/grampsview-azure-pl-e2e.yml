name: GrampsView e2e test
  
variables:
  - name: appBase
    value: 'GrampsView'
    
  - name: appxPackageDir
    value: '$(build.artifactStagingDirectory)\AppxPackages\\'

  - name: buildConfiguration
    value: 'Release'

  - name: buildPlatform
    value: 'x64'

  - name: solution
    value: '**/*.sln'

  - name: projects
    value: './GrampsView.Test.e2et/GrampsView.csproj'

  - group: winui-pipeline

#schedules:
#  - cron: '45 0 1 * *'
#    displayName: 'Monthly Build'
#    branches:
#        include:
#        - Main

resources:
  repositories: 
  - repository: shared 
    name: Shared/Shared
    type: git
    ref: master

trigger: none

pr: none

pool:
  name: Azure Pipelines
  vmImage: 'windows-latest'
  demands:
  - MSBuild
  - JDK

steps:
- checkout: self
  submodules: true

- task: NuGetAuthenticate@1
  inputs:
    nuGetServiceConnections: 'SharedSharpNuFeed'
    forceReinstallCredentialProvider: true

- template: /.azure/test/azure-build-nunit.yml@shared

- task: VSTest@2
  inputs:
    #batchingBasedOnAgentsOption: 'autoBatchSize' # Optional. Options: autoBatchSize, customBatchSize
    #batchingBasedOnExecutionTimeOption: 'autoBatchSize' # Optional. Options: autoBatchSize, customTimeBatchSize
    codeCoverageEnabled: true # Optional
    #collectDumpOn: 'onAbortOnly' # Optional. Options: onAbortOnly, always, never
    configuration: '$(BuildConfiguration)'
    #customBatchSizeValue: '10' # Required when distributionBatchType == BasedOnTestCases && BatchingBasedOnAgentsOption == CustomBatchSize
    #customRunTimePerBatchValue: '60' # Required when distributionBatchType == BasedOnExecutionTime && BatchingBasedOnExecutionTimeOption == CustomTimeBatchSize
    diagnosticsEnabled: true # Optional
    #distributionBatchType: 'basedOnTestCases' # Optional. Options: basedOnTestCases, basedOnExecutionTime, basedOnAssembly
    # dontDistribute: true # Optional
    failOnMinTestsNotRun: true # Optional
    #minimumExpectedTests: '1' # Optional
    #otherConsoleOptions: # Optional
    #overrideTestrunParameters: # Optional
    #pathtoCustomTestAdapters: # Optional
    #platform: '$(buildPlatform)'
    #publishRunAttachments: true # Optional
    #rerunFailedTestCasesMaxLimit: '5' # Optional
    #rerunFailedTests: False # Optional
    #rerunFailedThreshold: '30' # Optional
    #rerunMaxAttempts: '3' # Optional
    #rerunType: 'basedOnTestFailurePercentage' # Optional. Options: basedOnTestFailurePercentage, basedOnTestFailureCount
    #runAllTestsAfterXBuilds: '50' # Optional
    #runInParallel: False # Optional
    #runOnlyImpactedTests: False # Optional
    #runSettingsFile: # Optional
    #runTestsInIsolation: False # Optional
    searchFolder: '$(build.artifactstagingdirectory)' 
    #tcmTestRun: '$(test.RunId)' # Optional
    testAssemblyVer2: |
      **\\GrampsView.Test.e2e.dll
      !**\*UnitTests.dll
      !**\*TestAdapter.dll
      !**\obj\**
      !**\bin\**\ref\**
    #testConfiguration: # Required when testSelector == TestPlan
    #testFiltercriteria: # Optional
    #testPlan: # Required when testSelector == TestPlan
    #testRunTitle: # Optional
    testSelector: 'testAssemblies'
    #testSuite: # Required when testSelector == TestPlan
    #uiTests: false # Optional
    #vstestLocation: # Optional
    #vstestLocationMethod: 'version' # Optional. Options: version, location
    #vsTestVersion: 'latest' # Optional. Options: latest, 16.0, 15.0, 14.0, toolsInstaller

# This is the extension that generate the coverage test and converts it into .coveragexml.
# It will get all the Test Projects that is located in searchFolderForTestFiles using the filter in listTestFiles.
# After we get all the Test Projects dlls, We will run the VSTest for all the Test Project with /EnabledCodeCoverage,
# which will generate the DynamicCodeCoverage.coveragexml.
#- task: CoverageConverter@0
#  inputs:
#    searchFolderForTestFiles: '$(System.DefaultWorkingDirectory)'
#    vsTestExeFileLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe'
#    vsTestArgs: '/EnableCodeCoverage'
#    listTestFiles: '**\bin\**\*.Tests*.dll'
#    temporaryFolderForCodeCoverage: 'Agent.TempDirectory'
#    temporaryFileCoveragexml: '\TestResults\DynamicCodeCoverage.coveragexml'
#    codeCoverageExeFileLocation: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Team Tools\Dynamic Code Coverage Tools\CodeCoverage.exe'
#    failOnStandardError: false

# Here is the Report Generator that will get the DynamicCodeCoverage.coveraxml created above and convert into a Report.
#- task: reportgenerator@4
#  displayName: 'Generate Coverage Report'
#  inputs:
#    reports: '$(Agent.TempDirectory)\TestResults\DynamicCodeCoverage.coveragexml'
#    targetdir: '$(System.DefaultWorkingDirectory)\TestResults\Coverage\Reports'
#    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
#    failOnStandardError: false

# This app will publish the report into Azure Code Coverage Tab.
#- task: PublishCodeCoverageResults@1
#  displayName: 'Publish Coverage Report'
#  inputs:
#    codeCoverageTool: 'Cobertura'
#    summaryFileLocation: '$(System.DefaultWorkingDirectory)\TestResults\Coverage\Reports\Cobertura.xml'
#    reportDirectory: '$(System.DefaultWorkingDirectory)\TestResults\Coverage\Reports'
#    failOnStandardError: false
